#include <stdio.h>
#include <stdlib.h>

#define NUM_BUCKETS 10

void bucket_sort(float arr[], int size) {
    // Criando os baldes
    float buckets[NUM_BUCKETS][size];
    int bucket_count[NUM_BUCKETS];
    for (int i = 0; i < NUM_BUCKETS; i++) {
        bucket_count[i] = 0;
    }

    // Colocando os elementos nos baldes
    for (int i = 0; i < size; i++) {
        int index = arr[i] * NUM_BUCKETS;
        buckets[index][bucket_count[index]++] = arr[i];
    }

    // Ordenando cada balde e colocando de volta no vetor original
    for (int i = 0; i < NUM_BUCKETS; i++) {
        if (bucket_count[i] > 0) {
            for (int j = 0; j < bucket_count[i] - 1; j++) {
                for (int k = j + 1; k < bucket_count[i]; k++) {
                    if (buckets[i][j] > buckets[i][k]) {
                        float temp = buckets[i][j];
                        buckets[i][j] = buckets[i][k];
                        buckets[i][k] = temp;
                    }
                }
            }
        }
    }

    int index = 0;
    for (int i = 0; i < NUM_BUCKETS; i++) {
        for (int j = 0; j < bucket_count[i]; j++) {
            arr[index++] = buckets[i][j];
        }
    }
}

int interpolation_search(float arr[], int size, float target) {
    int low = 0, high = size - 1;

    while (low <= high && target >= arr[low] && target <= arr[high]) {
        if (low == high) {
            if (arr[low] == target) {
                return low;
            }
            return -1;
        }

        int pos = low + ((target - arr[low]) * (high - low)) / (arr[high] - arr[low]);
        if (arr[pos] == target) {
            return pos;
        }
        if (arr[pos] < target) {
            low = pos + 1;
        } else {
            high = pos - 1;
        }
    }

    return -1; // Elemento não encontrado
}

int main() {
    float grades[] = {95.2, 88.6, 76.4, 67.9, 82.3, 91.4, 78.8};
    int size = sizeof(grades) / sizeof(grades[0]);
    
    // Ordenando as notas usando Bucket Sort
    bucket_sort(grades, size);

    // Exibindo notas ordenadas
    printf("Notas ordenadas: \n");
    for (int i = 0; i < size; i++) {
        printf("%.2f ", grades[i]);
    }
    printf("\n");

    // Buscando uma nota com Interpolation Search
    float target_grade = 82.3;
    int index = interpolation_search(grades, size, target_grade);
    
    if (index != -1) {
        printf("Nota %.2f encontrada no índice %d.\n", target_grade, index);
    } else {
        printf("Nota %.2f não encontrada.\n", target_grade);
    }
    
    return 0;
}
