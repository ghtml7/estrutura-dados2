import time
import random

# Funções de busca (já implementadas anteriormente)
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

def interpolation_search(arr, target):
    low, high = 0, len(arr) - 1
    while low <= high and arr[low] <= target <= arr[high]:
        if low == high:
            if arr[low] == target:
                return low
            return -1
        pos = low + ((target - arr[low]) * (high - low)) // (arr[high] - arr[low])
        if arr[pos] == target:
            return pos
        if arr[pos] < target:
            low = pos + 1
        else:
            high = pos - 1
    return -1

def jump_search(arr, target):
    n = len(arr)
    step = int(n**0.5)
    prev = 0
    while arr[min(step, n) - 1] < target:
        prev = step
        step += int(n**0.5)
        if prev >= n:
            return -1
    while arr[prev] < target:
        prev += 1
        if prev == min(step, n):
            return -1
    if arr[prev] == target:
        return prev
    return -1

def exponential_search(arr, target):
    if arr[0] == target:
        return 0
    i = 1
    while i < len(arr) and arr[i] <= target:
        i = i * 2
    return binary_search(arr[i//2:i], target)

# Medindo os tempos de execução
def compare_search_algorithms(arr, target):
    results = []
    
    # Binary Search
    start_time = time.time()
    binary_search(arr, target)
    results.append(("Binary Search", time.time() - start_time))
    
    # Interpolation Search
    start_time = time.time()
    interpolation_search(arr, target)
    results.append(("Interpolation Search", time.time() - start_time))
    
    # Jump Search
    start_time = time.time()
    jump_search(arr, target)
    results.append(("Jump Search", time.time() - start_time))
    
    # Exponential Search
    start_time = time.time()
    exponential_search(arr, target)
    results.append(("Exponential Search", time.time() - start_time))

    return results

# Gerando uma lista ordenada de tamanho variável
arr_sizes = [100, 1000, 5000, 10000]
target = random.choice(range(1, 10000))

for size in arr_sizes:
    arr = sorted([random.randint(1, 10000) for _ in range(size)])
    print(f"Comparando algoritmos de busca para lista de tamanho {size}:")
    search_results = compare_search_algorithms(arr, target)
    for result in search_results:
        print(f"{result[0]}: {result[1]:.6f} segundos")
